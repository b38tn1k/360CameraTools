#!/usr/bin/env python
 # -*- coding: latin -*-
import sys
import os
import time
import pickle
import time
import shutil
import hashlib
from threading import Thread, activeCount
import subprocess as sp
import curses

def pretty_print(alist):
    for item in alist:
        print str(item)
    print '\nControl-C to Kill\n'
print '\n'

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class VideoFile(object):
    def __init__(self, parent, name, camera_schema, path, day, location, scene, rig, camera_number, video_format='MP4'):
        self.FFMPEG_BIN = "ffmpeg"
        self.infos = ''
        self.parent = parent
        self.day = day
        self.location = location
        self.scene = scene
        self.name = name
        self.new_name = name
        self.camera_number = camera_number
        self.rig = rig
        self.name = name
        self.path = path
        self.absolute_path = os.path.join(path, name)
        self.is_video_file = False
        self.data_schema = camera_schema[1]
        self.video_format = video_format
        self.copied = False
        if video_format in self.absolute_path:
            self.is_video_file = True
            self.get_number()
            self.analyse()
            self.digest_infos()
            self.get_absolute_duration()
            self.get_info(False)

    def get_number(self):
        # https://gopro.com/support/articles/hero3-and-hero3-file-naming-convention
        if self.data_schema[0] in self.name:
            self.video_number = int((self.name.split(self.data_schema[0]))[-1].split('.' + self.video_format)[0])
            self.chunk_number = 0
        if self.data_schema[1] in self.name:
            self.video_number = (self.name.split(self.data_schema[1]))[-1].split('.' + self.video_format)[0]
            self.chunk_number = int(self.video_number[:2])
            self.video_number = int(self.video_number[2:])

    def analyse(self):
        command = [self.FFMPEG_BIN,'-i', self.absolute_path, '-']
        pipe = sp.Popen(command, stdout=sp.PIPE, stderr=sp.PIPE)
        pipe.stdout.readline()
        self.infos = pipe.stderr.read()
        pipe.terminate()

    def digest_infos(self):
        index = self.infos.find('creation_time   : ')
        self.creation_time = self.infos[index+len('creation_time   : '):index+len('creation_time   : ' )+len('2015-01-01 00:32:49')]
        index = self.infos.find('Duration: ')
        self.duration = self.infos[index+len('Duration: '):index+len('Duration: ')+len('00:06:07.47')]
        index = self.infos.find('bitrate: ')
        self.bitrate = self.infos[index+len('bitrate: '):index+len('bitrate: ')+len('60158 kb/s')]
        index = self.infos.find(' fps')
        self.frame_rate = self.infos[index-5:index]
        index = self.infos.find(' [SAR')
        self.resolution = self.infos[index-len('1920x1440'):index]

    def get_absolute_duration(self):
        hours = float(self.duration[:2])
        minutes = float(self.duration[3:5])
        seconds = float(self.duration[6:])
        self.absolute_duration = 60*60*hours + 60*minutes + seconds

    def get_info(self, verbose=True):
        verbose = False #HACK
        if self.is_video_file:
            self.infos = (['File Name', self.new_name], ['Camera Number', self.camera_number], ['Video Number', self.video_number], ['Chunk Number', self.chunk_number], ['Created', self.creation_time], ['Duration', self.duration], ['Duration (sec)', self.absolute_duration], ['Bitrate', self.bitrate], ['Frame Rate', self.frame_rate], ['Resolution', self.resolution])
            self.make_name()
            if verbose:
                print '\n' + self.new_name + '\n'
                for info in self.infos:
                    print '{}:\t\t{}'.format(info[0], info[1])
            return self.infos

    def make_name(self):
        self.new_name = 'Cam{}_Vid{}_Prt{}_Day{}_Scene_{}.MP4'.format(self.camera_number, self.video_number, self.chunk_number, self.day, self.scene)
        self.new_name = self.new_name.replace(' ', '_').upper()

    def copy(self, target):
        if self.is_video_file:
            # print self.new_name + ' Begin'
            checksum = self.md5(self.absolute_path)
            shutil.copyfile(self.absolute_path, os.path.join(target, self.new_name))
            checksum2 = self.md5(os.path.join(target, self.new_name))
            # print self.new_name + ' Complete'
            if checksum2 != checksum:
                print '\033[91m'+"\nError Copying {} to {}\n".format(file_object.path, target)+'\033[0m'
                sys.stdout.write('\a')
                sys.stdout.flush()
            else:
                self.parent.copied_videos += 1
                self.copied = True

    def md5(self, fname):
        hash = hashlib.md5()
        with open(fname) as f:
            for chunk in iter(lambda: f.read(4096), ""):
                hash.update(chunk)
        # print 'md5 checksum: ' + hash.hexdigest()
        return hash.hexdigest()

class Volume(object):
    def __init__(self, name, camera_schema, volume_path, day, location, scene, rig, camera_number):
        self.name = name
        self.day = day
        self.location = location
        self.scene = scene
        self.videos = []
        self.info = []
        self.asset_path = ''
        self.is_card = False
        self.video_count = 0
        self.copied_videos = 0
        if name == 'TA_VR_M2' or name == 'TA_VR_M1' or 'Master' in name: #HACK
            self.target = True
        else:
            self.target = False
        self.camera_number = camera_number
        self.rig = rig
        self.camera_schema = camera_schema
        self.find_assets()

    def find_assets(self):
        for schema in self.camera_schema[0]:
            asset_path = os.path.join(volume_path, self.name)
            asset_path = os.path.join(asset_path, schema)
            if os.path.isdir(asset_path):
                self.asset_path = asset_path
                self.is_card = True
        if self.is_card:
            for _file in os.listdir(self.asset_path):
                if 'MP4' in _file or 'mp4' in _file:
                    self.video_count += 1
                    self.videos.append(VideoFile(self, _file, self.camera_schema, self.asset_path, self.day, self.location, self.scene, self.rig, self.camera_number))
        self.get_info()

    def set_camera_number(self, camera_number):
        self.camera_number = camera_number
        for video in self.videos:
            video.camera_number = self.camera_number

    def normalise_video_numbers(self):
        smallest_value = 1
        if self.is_card:
            if len(self.videos) > 1:
                sort_array = []
                for video in self.videos:
                    if video.is_video_file:
                        video.video_number += 1000 # prevent dumb wrap around stuff
                        sort_array.append(video.video_number)
                        sort_array = sorted(sort_array)
                        smallest_value = sort_array[0]
                for video in self.videos:
                    if video.is_video_file:
                        video.video_number -= (smallest_value - 1)
            else:
                for video in self.videos:
                    video.video_number = 1

    def get_info(self):
        for video in self.videos:
            if video.is_video_file:
                self.info.append(video.get_info())
        return self.info

class Project(object):
    def __init__(self, volume_path, camera_schema, help_string, camera_order=None):
        self.volumes = []
        self.help_string = help_string
        self.volume_path = volume_path
        self.camera_schema = camera_schema
        self.camera_order = camera_order
        self.info = []
        self.no_target = True
        self.load_config()
        self.video_count = 0
        self.border = 2
        self.copied_videos = 0

    def command_line_main(self):
        self.command_line_mode()
        self.detect_volumes()
        self.create_project_workspace()
        self.set_camera_numbers()
        for volume in self.volumes:
            volume.normalise_video_numbers()
            self.info.append(volume.get_info())
        self.copy()
        self.make_csv()
        self.save_config()

    def curses_main(self):
        # INIT PROJECT SETTINGS
        self.detect_volumes()
        self.set_camera_numbers()
        self.screen = curses.initscr()
        self.dims = self.screen.getmaxyx()
        curses.start_color()
        curses.use_default_colors()
        curses.curs_set(0)
        curses.noecho()
        self.screen.refresh()
        self.screen.clear()
        cursor = 3
        bug = ['>', '', '', '', '']
        # THEME
        self.init_colors()
        # END THEME
        user_input = 'dontquit'
        while user_input != ord('q'):
            self.screen.clear()
            self.draw_console()
            self.draw_infos()
            bug = ['', '', '', '', '']
            bug[cursor] = '>'
            self.screen.addstr(self.dims[0]-self.border-7, self.border*8, self.scene)
            self.screen.addstr(self.dims[0]-self.border-7, 0, bug[3])
            self.screen.addstr(self.dims[0]-self.border-6, self.border*8, str(self.day))
            self.screen.addstr(self.dims[0]-self.border-6, 0, bug[2])
            self.screen.addstr(self.dims[0]-self.border-5, self.border*8, self.location)
            self.screen.addstr(self.dims[0]-self.border-5, 0, bug[1])
            self.screen.addstr(self.dims[0]-self.border-4, self.border*8, self.rig)
            self.screen.addstr(self.dims[0]-self.border-4, 0, bug[0])
            self.screen.addstr(self.dims[0]-self.border-3, 0, bug[4])
            self.screen.refresh()
            user_input = self.screen.getch()
            if user_input == ord('c'):  # Copy
                self.screen.addstr(self.dims[0]-self.border-10, self.border, "PRESS 'c' again to confirm", curses.color_pair(4))
                confirm_copy = self.screen.getch()
                if confirm_copy == ord('c'):
                    self.create_project_workspace()
                    self.set_camera_numbers()
                    for volume in self.volumes:
                        for video in volume.videos:
                            video.day = self.day
                            video.scene = self.scene
                            video.location = self.location
                    for volume in self.volumes:
                        volume.normalise_video_numbers()
                        self.info.append(volume.get_info())
                    self.create_project_workspace()
                    self.copy()
                    self.make_csv()
                    self.screen.addstr(self.dims[0]-self.border-10, self.border, "COPY COMPLETE!\t\t\t\t", curses.color_pair(4))
                    self.screen.addstr(self.dims[0]-self.border-9, self.border, "\t\t\t\t\t\t\t\t")
                else:
                    user_input = ''
            if user_input == ord('h'):  # Help
                self.screen.clear()
                self.screen.addstr(0, self.border, 'HELP:')
                self.screen.addstr(self.border, self.border, 'To Navigate:\n\tj:\tDown\n\tk:\tUp\n  run imp -h for more info')
                self.screen.addstr(self.border+6, self.border, 'ENTER TO CONTINUE', curses.color_pair(self.priority_messages))
                self.screen.getstr(0,0,0)
            if user_input == ord('k'):  # Cursor Up
                cursor += 1
                if cursor == 5:
                    cursor -= 5
            if user_input == ord('j'):  # Cursor Down
                cursor -= 1
                if cursor == -1:
                    cursor+=5
            if user_input == ord('u'):  # Update Project Settings
                self.detect_volumes()
                self.set_camera_numbers()
                for volume in self.volumes:
                    volume.normalise_video_numbers()
                    self.info.append(volume.get_info())
                    for volume in self.volumes:
                        for video in volume.videos:
                            video.day = self.day
                            video.scene = self.scene
                            video.location = self.location
            if user_input == ord('e'):  # Eject all external drives
                for volume in self.volumes:
                    os.system('diskutil umount {}'.format(volume.name))
                self.detect_volumes()
                self.set_camera_numbers()
                for volume in self.volumes:
                    volume.normalise_video_numbers()
                    self.info.append(volume.get_info())
            if user_input == ord('i'):  # Insert
                self.screen.addstr(self.dims[0]-self.border-10, self.border, "Please [u]pdate to apply changes", curses.color_pair(4))
                curses.echo()
                if cursor == 0:
                    self.rig = self.screen.getstr(self.dims[0]-self.border-4, self.border*8, 60)
                if cursor == 1:
                    self.location = self.screen.getstr(self.dims[0]-self.border-5, self.border*8, 60)
                if cursor == 2:
                    self.day = self.screen.getstr(self.dims[0]-self.border-6, self.border*8, 60)
                if cursor == 3:
                    self.scene = self.screen.getstr(self.dims[0]-self.border-7, self.border*8, 60)
                if cursor == 4:
                    volume_name = self.screen.getstr(self.dims[0]-self.border-3, self.border*8, 60)
                    for volume in self.volumes:
                        if volume_name in volume.name:
                            volume.target = True
                            volume.is_card = False
                        elif not volume.target and not volume.is_card:
                            pass #this feels wrong
                        else:
                            volume.target = False
                            volume.is_card = True
                curses.noecho()
        curses.endwin()
        self.save_config()
        exit()

    def init_colors(self):
        self.target_th = 1
        self.camera_th = 2
        self.volume_th = 3
        self.priority_messages = 4
        self.menu_th = 5
        curses.init_pair(self.target_th, curses.COLOR_GREEN, curses.COLOR_BLACK)
        curses.init_pair(self.camera_th, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        curses.init_pair(self.volume_th, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
        curses.init_pair(self.priority_messages, curses.COLOR_RED, curses.COLOR_BLACK)
        curses.init_pair(self.menu_th, curses.COLOR_BLACK, curses.COLOR_WHITE)

    def draw_infos(self):
        for volume in self.volumes:
            if volume.target:
                self.screen.addstr(self.dims[0]-self.border-3, self.border*8, volume.name)
        self.screen.addstr(0, self.border, 'Volume Type: \tVolume Name:\tCamera Number:\t Video Count:\tCopied Videos:' )
        self.screen.addstr(self.dims[0]-self.border, self.border, '  [q]uit  [u]pdate  [c]opy  ed[i]t  [e]ject_cameras  [h]elp  ', curses.color_pair(self.menu_th))
        for n, volume in enumerate(self.volumes):
            if volume.is_card:
                self.screen.addstr(n+self.border, self.border, 'Camera\t' + volume.name + '\t\t' + str(volume.camera_number) + '\t\t' + str(volume.video_count) + '\t\t' + str(volume.copied_videos), curses.color_pair(self.camera_th))
            elif volume.target:
                self.screen.addstr(n+self.border, self.border, 'Target\t' + volume.name, curses.color_pair(self.target_th))
            else:
                self.screen.addstr(n+self.border, self.border, 'Volume\t' + volume.name, curses.color_pair(self.volume_th))
            self.screen.refresh()

    def draw_console(self):
        self.screen.addstr(self.dims[0]-self.border-7, self.border, 'Scene')
        self.screen.addstr(self.dims[0]-self.border-6, self.border, 'Day')
        self.screen.addstr(self.dims[0]-self.border-5, self.border, 'Location')
        self.screen.addstr(self.dims[0]-self.border-4, self.border, 'Rig')
        self.screen.addstr(self.dims[0]-self.border-3, self.border, 'Target')
        self.screen.addstr(self.dims[0]-self.border-1, self.border, 'Video Files in Project: ' + str(self.video_count) + ' Copied: ' + str(self.copied_videos), curses.color_pair(self.camera_th))

    def set_camera_numbers(self):
        if self.camera_order is not None:
            for volume in self.volumes:
                if volume.is_card:
                    volume.set_camera_number(int(self.camera_order.index(volume.name) + 1))

    def detect_volumes(self):
        camera_number = 1
        self.video_count = 0
        if len(os.listdir(volume_path)) != len(self.volumes):
            self.volumes = []
            for volume in os.listdir(volume_path):
                self.volumes.append(Volume(volume, self.camera_schema, self.volume_path, self.day, self.location, self.scene, self.rig, camera_number))
                camera_number += 1
        for volume in self.volumes:
            self.video_count += volume.video_count

    def load_config(self):
        with open('config', 'r') as config:
            self.day, self.scene, self.location, self.rig = pickle.load(config)
            config.close()

    def save_config(self):
        with open('config', 'wb') as config:
            pickle.dump([self.day, self.scene, self.location, self.rig], config)
            config.close()

    def if_not_target_dir_make_dir(self):
        if not os.path.isdir(self.target):
            os.mkdir(self.target)

    def create_project_workspace(self):
        for volume in self.volumes:
            if volume.target:
                self.target = os.path.join(self.volume_path, volume.name)
                self.target = os.path.join(self.target, self.location.replace(' ', '_'))
                self.if_not_target_dir_make_dir()
                self.target = os.path.join(self.target, 'DAY_{}'.format(self.day.replace(' ', '_')))
                self.if_not_target_dir_make_dir()
                # Make empty project stuff
                projects = os.path.join(self.target, 'PROJECTS')
                if not os.path.isdir(projects):
                    os.mkdir(projects)
                dailies = os.path.join(projects, 'DAILIES')
                if not os.path.isdir(dailies):
                    os.mkdir(dailies)
                # Continue Making target Dir
                self.target = os.path.join(self.target, 'SOURCE_MATERIAL')
                self.if_not_target_dir_make_dir()
                self.target = os.path.join(self.target, '{}_{}'.format(self.scene.replace(' ', '_'), self.rig.replace(' ', '_')))
                self.if_not_target_dir_make_dir()

    def copy(self):
        i = 0
        j = 0
        start_time = time.time()
        while self.video_count != self.copied_videos:
            for volume in self.volumes:
                card_active = False
                for video in volume.videos:
                    if not video.copied and not card_active:
        # for volume in self.volumes:
        #     if volume.is_card:
        #         j += 1
        #         for video in volume.videos:
        #             i += 1
                        t = Thread(target=video.copy, args = [self.target]).start()
                        card_active = True
                        self.copied_videos = 0
                        for _volume in self.volumes:
                            self.copied_videos += _volume.copied_videos
                        self.draw_infos()
                        self.draw_console
                        while(activeCount() >= 25): # SLOW IT DOWN HERE
                                time.sleep(1)
                                self.screen.addstr(self.dims[0]-self.border-10, self.border, "Waiting for active copy threads to finish:", curses.color_pair(self.priority_messages))
                                self.screen.addstr(self.dims[0]-self.border-9, self.border, "{} active threads, it has been {} seconds".format(activeCount(), int(time.time()-start_time)), curses.color_pair(self.priority_messages))
                                self.copied_videos = 0
                                for _volume in self.volumes:
                                    self.copied_videos += _volume.copied_videos # this update method can be improved (maybe add a parent to the volume class? self.parent.parent.copied_videos += 1 lol)
                                self.draw_infos()
                                self.draw_console()
                                self.screen.refresh()
                        while(activeCount() > 2):
                                time.sleep(1)
                                self.screen.addstr(self.dims[0]-self.border-10, self.border, "Waiting for active copy threads to finish:", curses.color_pair(self.priority_messages))
                                self.screen.addstr(self.dims[0]-self.border-9, self.border, "{} active threads, it has been {} seconds".format(activeCount(), int(time.time()-start_time)), curses.color_pair(self.priority_messages))
                                self.copied_videos = 0
                                for _volume in self.volumes:
                                    self.copied_videos += _volume.copied_videos
                                self.draw_infos()
                                self.draw_console()
                                self.screen.refresh()

    def make_csv(self):
        with open(os.path.join(self.target, '{}_Import.csv'.format(self.scene)), 'wb') as csv:
            csv.write('Day {}, {}, {}, Rig {}\n'.format(self.day, self.location, self.scene, self.rig))
            csv.write('File Name, Camera Number, Video Number, Chunk Number, Created, Duration, Duration (sec), Bitrate, Frame Rate, Resolution\n')
            for volume in self.volumes:
                for video in volume.videos:
                    if video.is_video_file:
                        video.get_info(False)
                        csv.write('{},{},{},{},{},{},{},{},{},{}\n'.format(video.new_name, video.camera_number, video.video_number, video.chunk_number, video.creation_time, video.duration, video.absolute_duration,  video.bitrate, video.frame_rate, video.resolution))
            csv.close()

volume_path = '/Volumes/'
camera_schema = (['DCIM/100GOPRO', 'DCIM/101GOPRO'], ['GOPR', 'GP'])
camera_order = None

if len(sys.argv) > 1:
    if sys.argv[1] == '-h':
        print bcolors.HEADER + '''       ██╗███╗   ███╗██████╗
       ██║████╗ ████║██╔══██╗
       ██║██╔████╔██║██████╔╝
       ██║██║╚██╔╝██║██╔═══╝
       ██║██║ ╚═╝ ██║██║
       ╚═╝╚═╝     ╚═╝╚═╝
360 Camera Data Management Tool
        ''' + bcolors.ENDC
        print '''imp has been tested on OSX and requires ffmpeg.

imp allows you to import videos from multiple SD cards
using a multicard reader. Running in default mode will
use the name of the card to determine the position of
the camera within the camera array - the first card
in alphanumeric order will be Camera 1 and so on.

To customise camera order, input the card names in their
array order eg. ''' + bcolors.OKGREEN + '''imp SD10 SD23 SD03 SD06''' + bcolors.ENDC + '''
After launching imp you are able to set the location,
scene, shoot day, rig and the target volume.

imp can also be run using the -lsvol mode:''' + bcolors.OKGREEN + '''
imp -lsvol''' + bcolors.ENDC + '''
which will list all drives as they are connected to your
machine. This can be helpful when setting up custom camera
orders.

It is reccomended you install htop:''' + bcolors.OKGREEN + '''
brew install htop''' + bcolors.ENDC + '''
to monitor your machine whilst running imp.
If anything looks hinky, hit cmd-Q!

My workflow for imp in iTerm2 uses a window arrangement
like this:
+-----+------------+
|     | imp -lsvol |
+ imp +------------+
|     |    htop    |
+-----+------------+
        '''
        exit()
    if sys.argv[1] == '-lsvol':
        list_vols = os.listdir('/Volumes')
        number_of_volumes = len(list_vols)
        pretty_print(list_vols)
        while True:
            for volume in list_vols:
                list_vols = os.listdir('/Volumes')
                if number_of_volumes != len(list_vols):
                    pretty_print(list_vols)
                    number_of_volumes = len(list_vols)

    camera_order = sys.argv[1:]
else:
    camera_order = None

my_project = Project(volume_path, camera_schema, help_string, camera_order)
my_project.curses_main()
