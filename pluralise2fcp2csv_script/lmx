#!/usr/bin/env python
import sys
#import xml but lazy
import pickle
import os

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def ordered_set(dups):
    ordered_set = []
    added = []
    for val in dups:
        if not val in added:
            ordered_set.append(val)
        added.append(val)
    return ordered_set

def find_max(ordered, x):
    return max(ordered, key=lambda entry: int(entry[x]))

output_directory = os.path.abspath(sys.argv[1])
split_path = output_directory.split('/')
export_path = ''
for _folder in split_path[1:]:
    if _folder != 'PROJECTS':
        export_path = export_path + "/" + str(_folder)
    else:
        export_path = export_path + "/PROJECTS/"
        break
print export_path


if sys.argv[1] == '-h':
    print 'feed me an xml from pluraleyes and I will turn it into a audio chart!'
    exit()
rough_result = []
with open(sys.argv[1], 'r') as f:
    f_lines = f.readlines()
    for line in f_lines:
        for search_term in ['name', 'start']:
            if search_term in line:
                entry = line.find('<{}>'.format(search_term) ) + len(search_term) + 2
                exit = line.find('</{}>'.format(search_term) )
                rough_result.append(line[entry:exit])
    f.close()
duplicates = []
for i, result in enumerate(rough_result):
    if is_number(result):
        duplicates.append([rough_result[i-1], result])
ordered = ordered_set(duplicates)
max_lag = int(find_max(ordered, 1)[1])
inverted = []
for value in ordered:
    inverted.append([value[0], max_lag - int(value[1])])

first_entry = ordered[0]
first_video = first_entry[0]
csv_name = '{}.csv'.format(first_video[first_video.index('DAY'):first_video.index('.MP4')])

with open(os.path.join(export_path, csv_name), 'wb') as f:
    f.write('\nFCP Order Frame Offset\n')
    print '\nFCP Order Frame Offset'
    for camera in ordered:
        print camera
        f.write(camera[0] + ',' + str(camera[1]) + '\n')
    f.write('\nInverted Frame Offset\n')
    print '\nInverted Frame Offset'
    for camera in inverted:
        print camera
        f.write(camera[0] + ',' + str(camera[1]) + '\n')
    f.close()
